---
source: src/codegen/tests/debug_tests/expression_debugging.rs
expression: result
---
; ModuleID = 'main'
source_filename = "main"

define i32 @myFunc(i16* %0) !dbg !3 {
entry:
  %myFunc = alloca i32, align 4, !dbg !10
  %x = alloca i16*, align 8, !dbg !10
  call void @llvm.dbg.declare(metadata i16** %x, metadata !11, metadata !DIExpression()), !dbg !12
  store i16* %0, i16** %x, align 8, !dbg !10
  call void @llvm.dbg.declare(metadata i32* %myFunc, metadata !13, metadata !DIExpression()), !dbg !16
  store i32 0, i32* %myFunc, align 4, !dbg !10
  %deref = load i16*, i16** %x, align 8, !dbg !10
  %load_x = load i16, i16* %deref, align 2, !dbg !10
  %1 = sext i16 %load_x to i32, !dbg !10
  %tmpVar = add i32 %1, 2, !dbg !10
  store i32 %tmpVar, i32* %myFunc, align 4, !dbg !10
  %myFunc_ret = load i32, i32* %myFunc, align 4, !dbg !10
  ret i32 %myFunc_ret, !dbg !10
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "RuSTy Structured text Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false)
!1 = !DIFile(filename: "main", directory: "")
!2 = !{}
!3 = distinct !DISubprogram(name: "myFunc", linkageName: "myFunc", scope: !1, file: !1, line: 2, type: !4, scopeLine: 6, flags: DIFlagPublic, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4 = !DISubroutineType(flags: DIFlagPublic, types: !5)
!5 = !{null, !6}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "__auto_pointer_to_int", baseType: !7, size: 64, align: 64, dwarfAddressSpace: 1)
!7 = !DIDerivedType(tag: DW_TAG_typedef, name: "int", scope: !8, file: !8, line: 6, baseType: !9, align: 16)
!8 = !DIFile(filename: "<internal>", directory: "")
!9 = !DIBasicType(name: "int16", size: 16, encoding: DW_ATE_signed, flags: DIFlagPublic)
!10 = !DILocation(line: 6, column: 12, scope: !3)
!11 = !DILocalVariable(name: "x", scope: !3, file: !1, line: 4, type: !6)
!12 = !DILocation(line: 4, column: 12, scope: !3)
!13 = !DILocalVariable(name: "myFunc", scope: !3, file: !1, line: 2, type: !14, align: 32)
!14 = !DIDerivedType(tag: DW_TAG_typedef, name: "dint", scope: !8, file: !8, line: 10, baseType: !15, align: 32)
!15 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed, flags: DIFlagPublic)
!16 = !DILocation(line: 2, column: 17, scope: !3)

